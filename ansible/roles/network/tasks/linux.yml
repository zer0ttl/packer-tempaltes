---
# Linux

- name: Network configuration - Disable IPv6
  when: ansible_os_family == 'Debian'
  become: true
  block:
    - name: Disable IPv6 for the current boot
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.disable_ipv6
        value: '1'
        sysctl_set: true

    - name: Ensure IPv6 stays disabled
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.disable_ipv6
        value: '1'
        state: present
        sysctl_set: true

- name: Network configuration - Systemd
  when: ansible_distribution == 'Debian'
  become: true
  block:
    - name: Create a new network configuration
      ansible.builtin.copy:
        src: "{{ role_path }}/files/00-installer-ens7.network"
        dest: /etc/systemd/network/00-dhcp.network
        owner: root
        group: root
        mode: '0644'

- name: Network configuration - Systemd
  when: ansible_distribution == 'Kali'
  become: true
  block:
    - name: Create a new network configuration
      ansible.builtin.copy:
        src: "{{ role_path }}/files/00-installer-eth0.network"
        dest: /etc/systemd/network/00-dhcp.network
        owner: root
        group: root
        mode: '0644'

- name: Network configuration - Netplan
  when: ansible_distribution == 'Ubuntu'
  become: true
  block:
    - name: Delete old netplan config
      ansible.builtin.file:
        path: /etc/netplan/00-installer-config.yaml
        state: absent

    - name: Replace the installer netplan config
      ansible.builtin.copy:
        src: "{{ role_path }}/files/00-installer-config.yaml"
        dest: /etc/netplan/00-installer-config.yaml
        owner: root
        group: root
        mode: '0644'

    - name: Create a new netplan config for eth0
      ansible.builtin.copy:
        src: "{{ role_path }}/files/01-netcfg.yaml"
        dest: /etc/netplan/01-netcfg.yaml
        owner: root
        group: root
        mode: '0600'

    - name: Generate the new netplan configuration
      ansible.builtin.command:
        cmd: netplan generate
      register: netplan_generate
      changed_when: netplan_generate.rc != 0

    - name: Apply the new netplan configuration
      ansible.builtin.command:
        cmd: netplan apply
      register: netplan_apply
      changed_when: netplan_apply.rc != 0

- name: DNS configuration - Resolv
  when: ansible_distribution in ['Debian', 'Kali']
  become: true
  block:
    - name: Create a new DNS configuration
      ansible.builtin.copy:
        src: "{{ role_path }}/files/resolv.conf"
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: '0644'

- name: DNS configuration
  when: ansible_distribution == 'Ubuntu'
  become: true
  block:
    - name: Set DNS servers
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        state: present
        regexp: '^#DNS='
        line: 'DNS=1.1.1.1 1.0.0.1'

    - name: Enable Domains
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        state: present
        regexp: '^#Domains='
        line: 'Domains='

    - name: Enable FallbackDNS
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        state: present
        regexp: '^#FallbackDNS='
        line: 'FallbackDNS='

    - name: Enable DNSSEC
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        state: present
        regexp: '^#DNSSEC='
        line: 'DNSSEC=yes'

    - name: Enable DNS caching
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        state: present
        regexp: '^#Cache='
        line: 'Cache=yes'

    - name: Enable DNS Stub Listener
      ansible.builtin.lineinfile:
        path: /etc/systemd/resolved.conf
        state: present
        regexp: '^#DNSStubListener='
        line: 'DNSStubListener=yes'

    - name: Restart Resolved sevice
      ansible.builtin.systemd_service:
        name: systemd-resolved.service
        state: restarted
        enabled: true

- name: Network configuration on boot
  when: ansible_os_family == 'Debian'
  become: true
  block:
    - name: Ensure the networking interfaces get configured on boot
      ansible.builtin.systemd_service:
        name: systemd-networkd.service
        state: restarted
        enabled: true

# Ref: https://wiki.archlinux.org/title/systemd-resolved
# Ref: https://www.freedesktop.org/software/systemd/man/latest/resolved.conf.html
# Ref: https://github.com/chef/bento/blob/main/packer_templates/scripts/ubuntu/networking_ubuntu.sh
# Ref: https://github.com/lavabit/robox/blob/master/scripts/ubuntu2204/network.sh
